{"version":3,"sources":["actions/index.js","App.js","reportWebVitals.js","reducers/counter.js","reducers/changeUser.js","reducers/index.js","index.js"],"names":["loadFirst","dispatch","axios","get","then","response","changeUser","data","results","user","type","increment","num","payload","App","state","searchelement","profile","e","test","this","text","document","getElementsByClassName","key","replace","undefined","textContent","includes","innerHTML","match","console","log","className","props","changeUserReducer","title","firstName","lastName","src","photo","alt","streetNum","streetName","city","country","postcode","email","username","password","dob","age","regiDate","regiAge","onClick","placeholder","onChange","setState","target","value","handleSearch","React","Component","connect","actions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","intialState","person","name","first","last","location","street","number","login","date","registered","picture","large","allReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1808f2ac.chunk.js","sourcesContent":["import axios from 'axios' //importing axios, not using async\r\n\r\nexport function loadFirst(){\r\n    return(dispatch)=>{\r\n        return axios.get(\"https://api.randomuser.me\").then((response)=>{ //retriving API call\r\n            dispatch(changeUser(response.data.results[0]));  //dispatching the result with the action changeUser\r\n        })\r\n    }\r\n}\r\nexport function changeUser(user){ //action changeUser\r\n    return{\r\n        type: \"CHANGE_USER\",\r\n        user:user\r\n    }\r\n}\r\n\r\nexport const increment = (num) => { //test action\r\n\r\n    return{\r\n        type:\"INCREMENT\",\r\n        payload: num\r\n    }\r\n}\r\n","//Allan Hernandez || CSCI-310 || React API with Redux\n\nimport './App.css';\nimport React from 'react'\nimport {connect} from \"react-redux\"\nimport * as actions  from './actions' // importing all actions \n\n\nclass App extends React.Component {\n\n  state = {\n    searchelement: \"\", //state prop called searchelement for searching \n    profile : \"\" \n  };\n\n  //search function, I could not implement it an easier way since I was not calling the API with async\n  handleSearch(e){\n    let test  = this.state.searchelement\n    let text = document.getElementsByClassName(\"otherText\")\n    test = test.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")\n\n    for (let key in text){ // traversing the <h> tags and their content\n\n          if( (text[key].textContent) === undefined ){\n            return\n          }\n          if( (text[key].textContent).includes(test) ){ // if the content includes the searchelement, then we will mark the instance of it. Caveats include it only finding one instance, and not being able to referesh the innerHTML\n          text[key].innerHTML = text[key].textContent.replace(test, match => `<mark>${match}</mark>`)\n          return\n         }\n         else{\n           console.log(\"fail\") \n         }     \n    }\n  }\n\n  // settingState(){\n  //   setTimeout(() => { this.setState({profile:this.props.changeUserReducer})  }, 1000); \n    \n  // }\n\n    render(){\n   \n\n        return (\n\n          <div className=\"App\"> \n\n            <div className = \"Intro\">\n              <div className= \"TextWrap\">\n                  <h1 className = \"headerText\">Rebirthing Your <br></br>Identity! </h1>\n                  <p className = \"subText\"> Are you in trouble with the law? Have you been caught selling the Blue Sky again? <br></br>Or do you just simply want to start to start it all over. Well now you can with the Rebirth! <br></br>We give you a random selection of potential profiles for you to study, remember and ultimately become! </p>\n              </div>\n              \n            </div>\n            <div className = \"propsContainer\"> {/* Props container is handling the props from the reducer where it is displaying all the info. I could have used maps which would had made the search function easier*/}\n              \n              <h1 className = \"nameText\"> { this.props.changeUserReducer.title + \" \" + this.props.changeUserReducer.firstName + \" \"  + this.props.changeUserReducer.lastName}  </h1>\n\n              <img src= {this.props.changeUserReducer.photo} alt= \"profile\"></img>\n\n              <h1 className = \"otherText\"> Address: {this.props.changeUserReducer.streetNum + \" \"+this.props.changeUserReducer.streetName + \" \" + this.props.changeUserReducer.city + \", \\n\" + this.props.changeUserReducer.country + \" \" + this.props.changeUserReducer.postcode}</h1>\n              <hr></hr>\n              <h1 className = \"otherText\">Email : {this.props.changeUserReducer.email}</h1>\n\n              <h1 className = \"otherText\">Username : {this.props.changeUserReducer.username}</h1>\n\n              <h1 className = \"otherText\">Password : {this.props.changeUserReducer.password}</h1>\n              <hr></hr>\n\n              <h1 className = \"otherText\"> DoB : {this.props.changeUserReducer.dob  }</h1> \n              \n              <h1 className = \"otherText\"> Age : {this.props.changeUserReducer.age}</h1>\n\n              <h1 className = \"otherText\"> Registered Date : { this.props.changeUserReducer.regiDate}</h1>\n\n              <h1 className = \"otherText\">Registered Age : { this.props.changeUserReducer.regiAge}</h1>\n\n              <hr></hr>\n              <div className = \"footer\">\n                <button className = \"test\" onClick = {() =>  {  this.props.loadFirst();   }  }   > Rebirth Your Identity!</button> {/*calls the loadFirst() function which is in the action index file*/}\n\n                <input className = \"myInput\" type= \"text\" placeholder =\"Enter Word to Search Here\" onChange = {(e) => this.setState({searchelement:e.target.value})  }></input> {/* for every update their is in the entry field, update the state searchelement with the value */}\n\n                <button onClick = {() =>  {  this.handleSearch()  }  }> Click To Search</button> {/* calls the search function*/}\n              </div>\n            </div>\n    \n          </div>\n        );\n      }\n\n  \n}\n\nconst mapStateToProps = (state)=>{\n  return state\n}\n\nexport default connect (mapStateToProps, actions)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\nconst counterReducer = (state = 0, action) => {\r\n    switch(action.type){\r\n      case \"INCREMENT\":\r\n        return state + action.payload;\r\n      default:\r\n          return 0\r\n    };\r\n};\r\n\r\n\r\nexport default counterReducer;","//inital state for the reducer\r\nlet intialState = {\r\n    person: \"Jeff\" \r\n}\r\n\r\nconst changeUserReducer = (state = intialState , action) =>{\r\n\r\n    switch(action.type){\r\n        case \"CHANGE_USER\": //when the action is CHANGE_USER, create an object that has all the elements of the human profile called from the API in actions.\r\n            return {\r\n                title: action.user.name.title,\r\n                firstName: action.user.name.first,\r\n                lastName: action.user.name.last,\r\n                streetNum: action.user.location.street.number,\r\n                streetName: action.user.location.street.name,\r\n                city : action.user.location.city, \r\n                country : action.user.location.country,\r\n                postcode : action.user.location.postcode,\r\n                email : action.user.email,\r\n                username : action.user.login.username,\r\n                password : action.user.login.password,\r\n                dob : action.user.dob.date,\r\n                age :action.user.dob.age,\r\n                regiDate: action.user.registered.date,\r\n                regiAge :action.user.registered.age,\r\n                photo: action.user.picture.large\r\n\r\n            }\r\n        default:\r\n            return state.person\r\n    }\r\n\r\n}\r\n\r\nexport default changeUserReducer","import counterReducer from './counter.js'\r\nimport changeUserReducer from \"./changeUser.js\"\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\nconst allReducers = combineReducers({\r\n    counterReducer: counterReducer,\r\n    changeUserReducer: changeUserReducer,\r\n})\r\n\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore, applyMiddleware} from 'redux'; // creating the globalized state\nimport allReducers from './reducers'\nimport {Provider} from 'react-redux'\nimport thunk from \"redux-thunk\"\n\n//const composeEnchancer = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__ || compose\n\n\n//creating a global store variable that has middleware and imported reducers\nlet store  =createStore(allReducers, applyMiddleware(thunk))\n\n\n\n\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}